				

					第四章 类库
  Java 8 中的另一个变化是引入了默认方法和接口的静态方法，接口中的方法也可以包含代码体了。

	1.在代码中使用Lambda表达式
例:使用 isDebugEnabled 方法降低日志性能开销 
Logger logger = new Logger();
 if (logger.isDebugEnabled()) {
     logger.debug("Look at this: " + expensiveOperation()); 
}
  　使用 Lambda 表达式简化日志代码 
Logger logger = new Logger();
logger.debug(() -> "Look at this: " + expensiveOperation());
   在 Logger 类中该方法是如何实现:从类库的角度看，我们可以使用内置的 Supplier 函数接口，它只有一个 get 方法。然后
通过调用 isDebugEnabled 判断是否需要记 录日志，是否需要调用 get 方法，如果需要，就调用 get 方法并将结果传给 debug 方法。
   启用 Lambda 表达式实现的日志记录器 
public void debug(Supplier<String> message) {
     if (isDebugEnabled()) {
         debug(message.get());
     } 
}
****不同的函数接口有不同的方法。如果使用 Predicate，就应该调用 test 方 法，如果使用 Function，就应该调用 apply 方法****


	2.基本类型.
  在 Java 中，有一些相伴的类型，比如 int 和 Integer―― 前者是*基本类型*，后者是*装箱类型*。基本类型内建在语言和运行环境中，
是基本的程序构 建模块；而装箱类型属于普通的 Java 类，只不过是对基本类型的一种封装。
  Java 的泛型是基于对泛型参数类型的擦除――换句话说，假设它是 Object 对象的实例―― 因此只有装箱类型才能作为泛型参数。
由于装箱类型是对象，因此在内存中存在额外开销。比如，整型在内存中占用 4 字节，整型对象却要占用 16 字节。
  ******将基本类型转换为装箱类型，称为装箱，反之则称为拆箱，两者都需要额外的计算开销*******
  为了减小这些性能开销，Stream 类的某些方法对基本类型和装箱类型做了区分。(。在 Java 8 中，仅对整型、 长整型和双浮点型
做了特殊处理) 对基本类型做特殊处理的方法在命名上有明确的规范:
  1)如果方法返回类型为基本类型，则在基本类型前加 To，t-->ToLongFunction-->long
  2)如果参数是基本类型，则不加前缀只 需类型名,    long-->LongFunction-->T
  3)。如果高阶函数使用基本类型，则在操作后加 后缀 To 再加基本类型，如 mapToLong。
  应尽可能多地使用对基本类型做过特殊处理的方法，进而改善性能。这些特殊 的 Stream 还提供额外的方法，避免重复实现一些
通用的方法，让代码更能体现出数值计算的意图。
例:  　使用 summaryStatistics 方法统计曲目长度 
public static void printTrackLengthStatistics(Album album) {
     IntSummaryStatistics trackLengthStats
             = album.getTracks()
                    .mapToInt(track -> track.getLength())
                    .summaryStatistics();
     System.out.printf("Max: %d, Min: %d, Ave: %f, Sum: %d",
                       trackLengthStats.getMax(),
                       trackLengthStats.getMin(),
                       trackLengthStats.getAverage(),
                       trackLengthStats.getSum()); 
}
  这里使用对基 本类型进行特殊处理的方法 mapToInt，将每首曲目映射为曲目长度。因为该方法返回一个 IntStream 对象，它包含
一个 summaryStatistics 方法，这个方法能计算出各种各样的统计 值，如 IntStream 对象内所有元素中的最小值、最大值、平均值
以及数值总和。


	3.重载解析.
  在 Java 中可以重载方法，造成多个方法有相同的方法名，但签名确不一样。这在推断参数 类型时会带来问题，因为系统可能会推断
出多种类型。这时，javac 会挑出**最具体**的类型。 
  例 1 中的方法调用在选择例 2 中定义的重载方法时，输出 String，而不是 Object。
例 1　方法调用 
overloadedMethod("abc");

例 2　两个重载方法可供选择 
private void overloadedMethod(Object o) {
     System.out.print("Object"); 
} 
 
private void overloadedMethod(String s) {
     System.out.print("String"); 
}
  Lambda 表达式的类型就是对应的函数接口类型，因此，将 Lambda 表达式作为参数 传递时，情况也依然如此。例 3 在例 4 的两个
方法中选择时，输出的是 IntegerBinaryOperator。
例 3　另外一个重载方法调用 
overloadedMethod((x, y) -> x + y);

例 4　两个重载方法可供选择 
private interface IntegerBiFunction extends BinaryOperator<Integer> {  
 
} 
 
private void overloadedMethod(BinaryOperator<Integer> Lambda) {
     System.out.print("BinaryOperator"); 
}
private void overloadedMethod(IntegerBiFunction Lambda) {
     System.out.print("IntegerBinaryOperator"); 
}
  当然，同时存在多个重载方法时，哪个是“最具体的类型”可能并不明确。
  总而言之，Lambda 表达式作为参数时，其类型由它的目标类型推导得出，推导过程遵循 如下规则：
如果只有一个可能的目标类型，由相应函数接口里的参数类型推导得出；
如果有多个可能的目标类型，由最具体的类型推导得出；
如果有多个可能的目标类型且最具体的类型不明确，则需人为指定类型。


	4.@FunctionalInterface
  接口函数就是某个模块写了（主要）给其它模块用的函数。简单的说接口函数就是类中的公有函数。
  事实上， 每个用作函数接口的接口都应该添加这个@FunctionalInterface注释。 Java 中有一些接口，虽然只含一个方法，但并
不是为了使用 Lambda 表达式来实现的。比如，有些对象内部可能保存着某种状态，使用带有一个方法 的接口可能纯属巧合。一个可
关闭的对象必须持有某种打开的资源，比如一个需要关闭的文件句柄。同样，该接 口也不能是一个纯函数，因为关闭资源是更改状态
的另一种形式。
  ******为了提高 Stream 对象可操作性而引入的各种新接 口，都需要有 Lambda 表达式可以实现它。它们存在的意义在于将代码块作为
数据打包起 来。因此，它们都添加了 @FunctionalInterface 注释。*******
  该注释会强制 javac 检查一个接口是否符合函数接口的标准。如果该注释添加给一个枚举 类型、类或另一个注释，或者接口包含不
止一个抽象方法，javac 就会报错。***重构代码时， 使用它能很容易发现问题。***


	5.二进制接口的兼容性
   Java 8 中对 API 最大的改变在于集合类。和其他编程平台相比，二进制兼容性一直被视为 Java 的关键优势所在。可以保证，只要
是 Java 1 到 Java 7 写出的代码，在Java 8中依然可以编译通过。事实上修改了像集合类这样的核心类库之后，这一保证也很难实现。
   在 JDK 之外实现 Collection 接口的类， 例如 MyCustomList，也仍然需要实现新增的 stream 方法。这个MyCustomList在 Java 8 
中无法通过编译，即使已有一个编译好的版本，在 JVM 加载 MyCustomList 类时，类加载器 仍然会引发异常。
这是所有使用第三方集合类库的梦魇，要避免这个糟糕情况，则需要在 Java 8 中添加新的 语言特性：**默认方法**


	6.默认方法.
  Collection 接口告诉它所有的子类： “如果你没有实现 stream 方法，就使用我的吧。”接口中这样的方法叫作默认方法，在任何
接口中，无论函数接口还是非函数接口，都可以使用该方法。
  Iterable 接口中也新增了一个默认方法：forEach，该方法功能和 for 循环类似，但是允许用户使用一个 Lambda 表达式作为循环体。
例: 　默认方法示例：forEach 实现方式 
default void forEach(Consumer<? super T> action) {
     for (T t : this) {
         action.accept(t);
     }
}
  它使用一个常规的 for 循环遍历 Iterable 对象，然后对每个值调用 accept 方法。重点是代码段前面的新关键字 default,这个关
键字告诉 javac 用户真正需要的是为接口添加一个新方法。除了添加了一个新的关键字，默认方法在继承规则上和普通方法也略有区别。
和类不同,***接口没有成员变量，因此默认方法只能通过调用子类的方法来修改子类本身，避免了对子类的实现做出各种假设***
    
   默认方法和子类
  默认方法的重写规则也有一些微妙之处。从最简单的情况开始来看：没有重写。
例: 　Parent 接口，其中的 welcome 是一个默认方法 
public interface Parent { 
 
    public void message(String body); 
 
    public default void welcome() {
         message("Parent: Hi!");
     } 
 
    public String getLastMessage(); 
 
}
  Parent 接口定义了一个默认方法 welcome，调用该方法时，发送一条信息。ParentImpl 类没有实现 welcome 方法，因此它自然继承
了该默认方法。
例:  　在客户代码中使用默认方法 
@Test
public void parentDefaultUsed() {
     Parent parent = new ParentImpl();
     parent.welcome();
     assertEquals("Parent: Hi!", parent.getLastMessage()); 
}
例:  　继承了 Parent 接口的 Child 接口 
public interface Child extends Parent { 
 
    @Override     
    public default void welcome() {
         message("Child: Hi!");
     } 
}
  Child 接口实现了自己的默认 welcome 方法，该方法重写了 Parent 的方法。同样在这个例子中，ChildImpl 类不会实现
 welcome 方法，因此它自然也继承了接口的默认方法。
例: 调用 Child 接口的客户代码 
@Test 
public void childOverrideDefault() {
     Child child = new ChildImpl();
     child.welcome();
     assertEquals("Child: Hi!", child.getLastMessage()); 
}
  现在默认方法成了虚方法――和静态方法刚好相反。任何时候，一旦与类中定义的方法产 生冲突，都要优先选择类中定义的方法。
例 1 和例 2 展示了这种情况，最终调用的是 OverridingParent 的，而不是 Parent 的 welcome 方法。
例 1　重写 welcome 默认实现的父类 
public class OverridingParent extends ParentImpl { 
     @Override
     public void welcome() {
         message("Class Parent: Hi!");
     } 
}
例 2　调用的是类中的具体方法，而不是默认方法 
@Test
public void concreteBeatsDefault() {
     Parent parent = new OverridingParent();
     parent.welcome();
     assertEquals("Class Parent: Hi!", parent.getLastMessage()); 
}
例 3　子接口重写了父接口中的默认方法 
public class OverridingChild extends OverridingParent implements Child { 
 
}
例 4　类中重写的方法优先级高于接口中定义的默认方法 
@Test 
public void concreteBeatsCloserDefault() {
     Child child = new OverridingChild();
     child.welcome();
     assertEquals("Class Parent: Hi!", child.getLastMessage()); 
}
****原因在于，与接口中定义的默认方法相比，类中重写的方法更具体****
  简言之，类中重写的方法胜出。这样的设计主要是由增加默认方法的目的决定的，增加默认方法主要是为了在接口上向后兼容。


	7.多重继承
  接口允许多重继承，因此有可能碰到两个接口包含签名相同的默认方法的情况。
例 1　Jukebox public interface Jukebox { 
 
    public default String rock() {
         return "... all over the world!";     
  } 
 
}
例 2　Carriage public interface Carriage { 
 
    public default String rock() {
         return "... from side to side";
     } 
} 
 
    public class MusicalCarriage implements Carriage, Jukebox {
     }
  此时，javac 并不明确应该继承哪个接口中的方法，因此编译器会报错,在类中实现 rock 方法就能解决这个问题:
public class MusicalCarriage
    implements Carriage, Jukebox { 
    @Override
    public String rock() {
         return Carriage.super.rock();
     } 
}
  该例中使用了增强的 super 语法，用来指明使用接口 Carriage 中定义的默认方法,此前使用 super 关键字是指向父类，现在使用
类似 InterfaceName.super 这样的语法指的是继承自父接口的方法。
			********************************************************
三定律
1. 类胜于接口。如果在继承链中有方法体或抽象的方法声明，那么就可以忽略接口中定义的方法。 
2. 子类胜于父类。如果一个接口继承了另一个接口，且两个接口都定义了一个默认方法，那么子类中定义的方法胜出。 
3. 没有规则三。如果上面两条规则不适用，子类要么需要实现该方法，要么将该方法声明为抽象方法。
其中第一条规则是为了让代码向后兼容。
			********************************************************
	8.权衡
  接口和抽象类之间还是存在明显的区别。接口允许多重继承，却没有成员变量；抽象类可以继承成员变量，却不能多重继承。
  在对问题域建模时，需要根据具体情况进行权衡，而 在以前的 Java 中可能并不需要这样。


	9.接口的静态方法
   Stream 是个接口，Stream.of 是接口的静态方法。如果想创建一个由简单值组成的 Stream，自然希望 Stream 中能有一个这样的
方法。 这在以前很难达成，引入重接口的 Stream 对象，最后促使 Java 为接口加入了静态方法。
   Stream 和其他几个子类还包含另外几个静态方法。特别是 range 和 iterate(反复声明) 方法提供了产生 Stream 的其他方式。

	10.Optional
   reduce 方法有两种形式，一种如前面出现的需要有一 个初始值，另一种变式则不需要有初始值。
   没有初始值的情况下，reduce 的第一步使用 Stream 中的前两个元素。有时，reduce 操作不存在有意义的初始值，这样做就是有
意义的，此时，reduce 方法返回一个 Optional 对象。
   Optional 是为核心类库新设计的一个数据类型，用来替换 null 值。使用 Optional 对象有两个目的：首先，Optional 对象鼓励
程序员适时检查变量是否为空，以避免代码缺陷；其次，它将一个类的 API 中可能为空的值文档化.

例 1 创建某个值的 Optional 对象 
Optional<String> a = Optional.of("a");
assertEquals("a", a.get());

例 2 创建一个空的 Optional 对象，并检查其是否有值 
Optional emptyOptional = Optional.empty(); 
Optional alsoEmpty = Optional.ofNullable(null); 
 
assertFalse(emptyOptional.isPresent()); 
 					// 例 1 中定义了变量 a 
assertTrue(a.isPresent());
  使用 Optional 对象的方式之一是在调用 get() 方法前，先使用 isPresent 检查 Optional 对象是否有值。
例 3　使用 orElse 和 orElseGet 方法 
assertEquals("b", emptyOptional.orElse("b")); 
assertEquals("c", emptyOptional.orElseGet(() -> "c"));


	11.要点回顾
 IntStream 可以显著提升系统性能。 
 默认方法是指接口中定义的包含方法体的方法，方法名有 default 关键字做前缀。 
 在一个值可能为空的建模情况下，使用 Optional 对象能替代使用 null 值。


***********************************************************************************************************************
***********************************************************************************************************************

		第五章     高级集合类和收集器

  *JAVA8新引入的 Collector 类。
  *方法引用可以帮助大家在 Lambda 表达式中轻松使用已有代码,编写大量使用集合类的代码时， 使用方法引用能让程序员获得丰厚
的回报


	1.方法引用
   Lambda 表达式有一个常见的用法:调用参数
例: 想得到艺术家的姓名
artist -> artist.getName() 
Java 8 为其提供了一个简写语法，叫作方法引用,代码如下:
Artist::getName
****标准语法为 Classname::methodName****
  使用 Lambda 表达式创建一个 Artist 对象
(name, nationality) -> new Artist(name, nationality)
  使用方法引用，上述代码可写为：
Artist::new
  还可以用这种方式创建数组，下面的代码创建了一个字符串型的数组：
String[]::new
  每次写出形如 x -> foo(x) 的 Lambda 表达式时， 和直接调用方法 foo 是一样的。方法引用只不过是基于这样的事实，提供了一种
简短的语法而已。


	2.元素顺序
   直观上看，流是有序的，因为流中的元素都是按顺序处理的。这种顺序称为出现顺序。出 现顺序的定义依赖于数据源和对流的操作。
   在一个有序集合中创建一个流时，流中的元素就按出现顺序排列，因此，下例中的代码 总是可以通过。
例: 顺序测试永远通过 
List<Integer> numbers = asList(1, 2, 3, 4); 
 
List<Integer> sameOrder = numbers.stream()
                                 .collect(toList()); 
assertEquals(numbers, sameOrder);
  如果集合本身就是无序的，由此生成的流也是无序的。HashSet 就是一种无序的集合，因此不能保证以下例所示的程序每次都通过。
例: 顺序测试不能保证每次通过 
Set<Integer> numbers = new HashSet<>(asList(4, 3, 2, 1)); 
 
List<Integer> sameOrder = numbers.stream()
                                 .collect(toList()); 
assertEquals(asList(4, 3, 2, 1), sameOrder);		// 该断言有时会失败 
  流的目的不仅是在集合类之间做转换，而且同时提供了一组处理数据的通用操作。有些集 合本身是无序的，但这些操作有时会产生
顺序
例:  生成出现顺序 
Set<Integer> numbers = new HashSet<>(asList(4, 3, 2, 1)); 
 
List<Integer> sameOrder = numbers.stream()
                                 .sorted()
                                 .collect(toList()); 
 
assertEquals(asList(1, 2, 3, 4), sameOrder);
  一些中间操作会产生顺序，比如对值做映射时，映射后的值是有序的，这种顺序就会保留 下来。如果进来的流是无序的，出去的流也
是无序的,我们只能 断言 HashSet 中含有某元素，但对其顺序不能作出任何假设，因为 HashSet 是无序的，使 用了映射操作后，得到
的集合仍然是无序的。
例: 
List<Integer> numbers = asList(1, 2, 3, 4); 
 
List<Integer> stillOrdered = numbers.stream()
                                    .map(x -> x + 1)
                                    .collect(toList()); 
 
// 顺序得到了保留 
assertEquals(asList(2, 3, 4, 5), stillOrdered); 
 
Set<Integer> unordered = new HashSet<>(numbers); 
 
List<Integer> stillUnordered = unordered.stream()
                                        .map(x -> x + 1) 
                                        .collect(toList()); 
 
// 顺序得不到保证 
assertThat(stillUnordered, hasItem(2)); 
assertThat(stillUnordered, hasItem(3)); 
assertThat(stillUnordered, hasItem(4));
assertThat(stillUnordered, hasItem(5));
  一些操作在有序的流上开销更大，调用 unordered 方法消除这种顺序就能解决该问题。大 多数操作都是在有序流上效率更高，比如
filter、map 和 reduce 等。
  使用并行流时，forEach 方法不能保证元素是 按顺序处理的。如果需要保证按顺序处理，应该使用 forEachOrdered 方法


	3.收集器
  收集器，一种通用的、从流生成复杂值的结构。只要将它传给 collect 方法，所有的流就都可以使用它了。
  标准类库已经提供了一些有用的收集器,本章示例代码中的收集器都是 从 java.util.stream.Collectors 类中静态导入的。

(1)　转换成其他集合 
  有一些收集器可以生成其他集合。比如前面已经见过的 toList，生成了 java.util.List 类 的实例。还有 toSet 和 toCollection，
分别生成 Set 和 Collection 类的实例。
  通常情况下，创建集合时需要调用适当的构造函数指明集合的具体类型：
		List<Artist> artists = new ArrayList<>();
但是调用 toList 或者 toSet 方法时，不需要指定具体的类型.
例:  使用 toCollection，用定制的集合收集元素 
stream.collect(toCollection(TreeSet::new));
(2)　转换成值
  利用收集器让流生成一个值
例:　找出成员最多的乐队 
public Optional<Artist> biggestGroup(Stream<Artist> artists) {
     Function<Artist,Long> getCount = artist -> artist.getMembers().count();
     return artists.collect(maxBy(comparing(getCount))); 
}
minBy 就如它的方法名，是用来找出最小值的。
  还有些收集器实现了一些常用的数值运算。
例:　找出一组专辑上曲目的平均数 
public double averageNumberOfTracks(List<Album> albums) {
     return albums.stream() 
                  .collect(averagingInt(album -> album.getTrackList().size())); 
}
和以前一样，通过调用 stream 方法让集合生成流，然后调用 collect 方法收集结果。 averagingInt 方法接受一个Lambda表达式作
参数，将流中的元素转换成一个整数，然后再计算平均数。
  Java 8 也提供了能完成类似功能的收集器，如 averagingInt。可以使用 summingInt 及其重 载方法求和。SummaryStatistics 也
可以使用 summingInt 及其组合收集。
(3)　数据分块
  另外一个常用的流操作是将其分解成两个集合。我们有这样一个收集器 partitioningBy，它接受一个流，并将其分成两部分,它使用
Predicate 对象判断一个元素应该属于哪个部分，并根据布尔值返回一 个 Map 到列表。因此，对于 true List 中的元素，Predicate 
返回 true；对其他 List 中的 元素，Predicate 返回 false。
例: 将艺术家组成的流分成乐队和独唱歌手两部分 
public Map<Boolean, List<Artist>> bandsAndSolo(Stream<Artist> artists) {
     return artists.collect(partitioningBy(artist -> artist.isSolo())); 
}
例:  使用方法引用将艺术家组成的 Stream 分成乐队和独唱歌手两部分 
public Map<Boolean, List<Artist>> bandsAndSoloRef(Stream<Artist> artists) {
     return artists.collect(partitioningBy(Artist::isSolo)); 
}
(4)　数据分组
  数据分组是一种更自然的分割数据操作，与将数据分成 ture 和 false 两部分不同，可以使 用任意值对数据分组
例:　使用主唱对专辑分组 
public Map<Artist, List<Album>> albumsByArtist(Stream<Album> albums) {
     return albums.collect(groupingBy(album -> album.getMainMusician()));
}
  读者可能知道 SQL 中的 group by 操作，我们的方法是和这类似的一个概念， 只不过在 Stream 类库中实现了而已。
(5)　字符串
  很多时候，收集流中的数据都是为了在最后生成一个字符串。假设我们想将参与制作一张 专辑的所有艺术家的名字输出为一个格式化
好的列表
例: 使用 for 循环格式化艺术家姓名 
StringBuilder builder = new StringBuilder("["); 
for (Artist artist : artists) {
     if (builder.length() > 1)
         builder.append(", "); 
 
    String name = artist.getName();
    builder.append(name); 
} 
builder.append("]"); 
String result = builder.toString();
例:　使用流和收集器格式化艺术家姓名 
String result =
     artists.stream()
               .map(Artist::getName)
               .collect(Collectors.joining(", ", "[", "]"));
这里使用 map 操作提取出艺术家的姓名，然后使用 Collectors.joining 收集流中的值，该方法可以方便地从一个流得到一个字符串，
允许用户提供分隔符（用以分隔元素）、前缀和后缀。
(6)　组合收集器
  将各种收集器组合起来，会变得更强大。
  如何计算一个艺术家的专辑数量。一个简单的方案是使用前面的方法对专辑先分组后计数
例:　计算每个艺术家专辑数的简单方式 
Map<Artist, List<Album>> albumsByArtist
     = albums.collect(groupingBy(album -> album.getMainMusician())); 
 
Map<Artist, Integer> numberOfAlbums = new HashMap<>(); 
for(Entry<Artist, List<Album>> entry : albumsByArtist.entrySet()) {
     numberOfAlbums.put(entry.getKey(), entry.getValue().size()); 
}
这种方式看起来简单，但却有点杂乱无章。这段代码也是命令式的代码，不能自动适应并行化操作。
例:　使用收集器计算每个艺术家的专辑数 
public Map<Artist, Long> numberOfAlbums(Stream<Album> albums) {
     return albums.collect(groupingBy(album -> album.getMainMusician(),
                                      counting())); 
}
groupingBy 先将元素分成块，每块都与分类函数 getMainMusician 提供的键值相关联，然后使用下游的另一个收集器收集每块中的
元素，最好将结果映射为一个 Map。
   这次我们不想生成一组专辑，只希望得到专辑名。这个问题仍然可 以用前面的方法解决，先将专辑分组，然后再调整生成的 Map 
中的值
例:　使用简单方式求每个艺术家的专辑名 
public Map<Artist, List<String>> nameOfAlbumsDumb(Stream<Album> albums) {
    Map<Artist, List<Album>> albumsByArtist = 
            albums.collect(groupingBy(album ->album.getMainMusician())); 
 
    Map<Artist, List<String>> nameOfAlbums = new HashMap<>();
    for(Entry<Artist, List<Album>> entry : albumsByArtist.entrySet()) {
         nameOfAlbums.put(entry.getKey(), entry.getValue()
                                               .stream()
                                               .map(Album::getName)
                                               .collect(toList()));
     }
     return nameOfAlbums; 
}
  mapping 允许在收集器的容器上执行类似 map 的操作。但是需要指明使用什么样的集合类 存储结果，比如 toList。这些收集器就像
乌龟叠罗汉，龟龟相驮以至无穷。
  mapping 收集器和 map 方法一样，接受一个 Function 对象作为参数
例: 使用收集器求每个艺术家的专辑名 
public Map<Artist, List<String>> nameOfAlbums(Stream<Album> albums) {
     return albums.collect(groupingBy(Album::getMainMusician,
                                      mapping(Album::getName, toList()))); 
}
  这两个例子中我们都用到了第二个收集器，用以收集最终结果的一个子集。这些收集器叫作下游收集器
******收集器是生成最终结果的一剂配方*******下游收集器则是生成部分结果的配 方，主收集器中会用到下游收集器。这种组合使用
收集器的方式，使得它们在 Stream 类库 中的作用更加强大。
(7)　重构和定制收集器
  JDK 已经提供了一个完美的收集器 joining。这里只是为了展示如何定制收集器，以及如 何使用 Java 8 提供的新功能来重构遗留
代码。
例:使用定制的收集器 StringCollector 收集字符串 
String result =
     artists.stream()
            .map(Artist::getName)
            .collect(new StringCollector(", ", "[", "]"));
既然已经将所有对字符串的连接操作代理给了定制的收集器，应用程序就不需要关心 StringCollector 对象的任何内部细节，它和框架
中其他 Collector 对象用起来是一样的。
  先来实现 Collector 接口（例1），由于 Collector 接口支持泛型，因此先得确定一些具 体的类型：
待收集元素的类型，这里是 String； 
累加器的类型 StringCombiner； 
最终结果的类型，这里依然是 String。
例1: 定义字符串收集器 
public class StringCollector implements Collector<String, StringCombiner, String> {
}
  一个收集器由四部分组成。
  1)首先是一个 Supplier
　Supplier 是创建容器的工厂 
public Supplier<StringCombiner> supplier() {
     return () -> new StringCombiner(delim, prefix, suffix);
}
  2)收集器的 accumulator 的作用和 reduce 操作的第二个参数一样，它结合之前操作的结果和当前值，生成并返回新的值
  accumulator 是一个函数，它将当前元素叠加到收集器 
public BiConsumer<StringCombiner, String> accumulator() {
     return StringCombiner::add; 
}
这里的 accumulator 用来将流中的值叠加入容器中
  3)combine 方法很像 reduce 操作的第三个方法。如果有两个容器，我们需要将其合并。
  　combiner 合并两个容器 
public BinaryOperator<StringCombiner> combiner() {
     return StringCombiner::merge; 
}
  4)实现 finisher 方法，只需将该操作代理给已经实现的 toString 方法即可
  　finisher 方法返回收集操作的最终结果 
public Function<StringCombiner, String> finisher() {
     return StringCombiner::toString; 
}
(8)　对收集器的归一化处理
  reducing 是一种定制收集器的简便方式 
String result =
         artists.stream()
                .map(Artist::getName)
                .collect(Collectors.reducing(
                    new StringCombiner(", ", "[", "]"),
                    name -> new StringCombiner(", ", "[", "]").add(name),
                    StringCombiner::merge))
                .toString();


	4.map类的一些变化
  假设使用 Map<String, Artist> artistCache 定义缓存，我们需要使用费时的数据库操作查询艺术家信息
例: 使用显式判断空值的方式缓存 
public Artist getArtist(String name) {
     Artist artist = artistCache.get(name);
     if (artist == null) {
         artist = readArtistFromDB(name);
         artistCache.put(name, artist);
     }
     return artist; 
}
  Java 8 引入了一个新方法 computeIfAbsent，该方法接受一个 Lambda 表达式，值不存在时使用该 Lambda 表达式计算新值
例:  　使用 computeIfAbsent 缓存 
public Artist getArtist(String name) {
     return artistCache.computeIfAbsent(name, this::readArtistFromDB); 
}
  为 Map 接口新增的 compute 和 computeIfAbsent 就能处理在值不存在时不计算的情况.
  Java 8 为 Map 接口新增了一个 forEach 方法，该方法接受一个 BiConsumer 对象 为参数（该对象接受两个参数，返回空），通过
内部迭代编写出易于阅读的代码
例: 使用内部迭代遍历 Map 里的值 
Map<Artist, Integer> countOfAlbums = new HashMap<>(); 
albumsByArtist.forEach((artist, albums) -> {
     countOfAlbums.put(artist, albums.size()); 
});

	5.要点回顾
方法引用是一种引用方法的轻量级语法，形如： ClassName::methodName。 
收集器可用来计算流的最终值，是 reduce 方法的模拟。 
Java 8 提供了收集多种容器类型的方式，同时允许用户自定义收集器。
 

















  













	








 






